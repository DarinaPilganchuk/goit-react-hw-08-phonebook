{"version":3,"file":"static/js/727.6beecad8.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ContactCard = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  padding: 5px;\n  background-color: #abd2f1;\n\n  margin-bottom: 15px;\n`;\nexport const Contact = styled.p`\n  margin-left: 30px;\n`;\nexport const Button = styled.button`\n  background-color: #abd2f1;\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  color: #0926a6;\n  padding: 5px 15px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: 30px;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #0926a6;\n    font-weight: 700;\n    background-color: #7aace8;\n  }\n`;\n","import {\n  Contact,\n  Button,\n  ContactCard,\n} from 'components/ContactItem/ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operation';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <ContactCard>\n      <Contact>\n        {name}: {number}\n      </Contact>\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </ContactCard>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport PropTypes from 'prop-types';\n\nimport { selectFilter, selectAllContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectAllContacts);\n  const filterValue = useSelector(selectFilter).toLowerCase().trim();\n  console.log(contacts);\n\n  const visibleContacts = contacts.filter(item => {\n    return item.name.toLowerCase().includes(filterValue);\n  });\n\n  console.log(visibleContacts);\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          <ContactItem name={name} number={number} id={id} />\n        </li>\n      ))}\n      {visibleContacts.length === 0 && filterValue === '' && (\n        <p>The phonebook is empty, please add a new contact</p>\n      )}\n      {visibleContacts.length === 0 && filterValue !== '' && (\n        <p>Not found</p>\n      )}\n    </ul>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.array,\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.number,\n};\n","import styled from 'styled-components';\nexport const TitleInput = styled.label`\n  color: #0926a6;\n  font-size: 16px;\n`;\nexport const Input = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 15px;\n  margin-bottom: 15px;\n`;\n","import { TitleInput, Input } from './Filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { contactsFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const handleInputValue = e => {\n    const query = e.target.value;\n    console.log(query);\n\n    dispatch(contactsFilter(query));\n  };\n\n  return (\n    <TitleInput>\n      Enter name\n      <Input type=\"text\" name=\"name\" onChange={handleInputValue}></Input>\n    </TitleInput>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\nexport const FormStyle = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 15px;\n\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  padding: 25px;\n  width: 400px;\n`;\n\nexport const Button = styled.button`\n  background-color: #abd2f1;\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  color: #0926a6;\n  padding: 5px 15px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    border: 1px solid #fff;\n    font-weight: 700;\n    background-color: #7aace8;\n  }\n`;\nexport const TitleInput = styled.label`\n  color: #0926a6;\n  font-size: 20px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 25px;\n  width: 200px;\n`;\nexport const InputName = styled.input`\n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  background-color: #d6e9ff;\n  padding: 5px;\n  margin-left: 70px;\n  width: 200px;\n`;\n","// import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Button, FormStyle, Input, InputName, TitleInput } from './Form.styled';\nimport { addContact } from 'redux/contacts/operation';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const ListContacts = {\n      name: form.name.value,\n      number: form.number.value,\n      id: nanoid(),\n    };\n\n    dispatch(addContact(ListContacts));\n    form.reset();\n  };\n\n  return (\n    <FormStyle onSubmit={handleSubmit}>\n      <TitleInput>\n        Name\n        <InputName\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Min Yoongi\"\n        />\n      </TitleInput>\n      <TitleInput>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"+38(0хх)-ххх-хх-хх\"\n        />\n      </TitleInput>\n      <Button type=\"submit\">Add contact</Button>\n    </FormStyle>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      <div>{isLoading && 'Виконується запит...'}</div>\n      <ContactList />\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["ContactCard","styled","_templateObject","_taggedTemplateLiteral","Contact","_templateObject2","Button","_templateObject3","ContactItem","_ref","name","number","id","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteContact","selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactList","useSelector","filterValue","toLowerCase","trim","console","log","visibleContacts","item","includes","map","length","TitleInput","Input","Filter","onChange","e","query","target","value","contactsFilter","nanoid","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","FormStyle","_templateObject4","InputName","_templateObject5","Form","onSubmit","preventDefault","form","ListContacts","addContact","reset","pattern","title","required","placeholder","isLoading","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}